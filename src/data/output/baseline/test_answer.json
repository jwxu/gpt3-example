{
    "data": [
        {
            "question": "give me all cosmonauts .",
            "paraphrase": "give me all cosmonauts .",
            "gold": "@wd . entity ( ) filter ( contains ( country_of_citizenship , \" Q15180 \" ^^wd:entity ) || contains ( country_of_citizenship , \" Q159 \" ^^wd:entity ) ) && contains ( occupation , \" Q11631 \" ^^wd:entity ) ;",
            "thingtalk": "Failed to parse the question.",
            "sparql": null,
            "gold_answer": "Vladimir Komarov (Q104865)\nPavel Popovich (Q118490)\nGherman Titov (Q152298)\nSvetlana Savitskaya (Q152318)\nAlexey Leonov (Q154269)\nand 166 more ...",
            "answer": ""
        },
        {
            "question": "give me the birthdays of all actors of the television show charmed .",
            "paraphrase": "give me the birthdays of all actors of the television show charmed .",
            "gold": "[ < cast_member / date_of_birth > ] of @wd . entity ( ) filter id == \" Q162371 \" ^^wd:entity ;",
            "thingtalk": "Failed to parse the question.",
            "sparql": null,
            "gold_answer": "1973-12-03T00:00:00Z",
            "answer": ""
        },
        {
            "question": "who is the daughter of robert kennedy married to ?",
            "paraphrase": "who is the daughter of robert kennedy married to ?",
            "gold": "[ spouse ] of @wd . entity ( ) filter in_array ( id , any ( [ child ] of @wd . entity ( ) filter id == \" Q25310 \" ^^wd:entity ) ) && sex_or_gender == enum female ;",
            "thingtalk": "[ unmarried_partner ] of @wd . entity ( ) filter id == \" Q25310 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q25310> <http://www.wikidata.org/prop/direct/P451> ?x. }",
            "gold_answer": "Paul Hill (Q15133215)\nMark Bailey (Q29938796)\nDavid Lee Townsend (Q75326812)\nJeffrey Robert Ruhe (Q75326831)\nAndrew Cuomo (Q11673)\n",
            "answer": "None"
        },
        {
            "question": "which river does the brooklyn bridge cross ?",
            "paraphrase": "which river does the brooklyn bridge cross ?",
            "gold": "[ crosses ] of @wd . entity ( ) filter id == \" Q125006 \" ^^wd:entity ;",
            "thingtalk": "[ crosses ] of @wd . entity ( ) filter id == \" Q125006 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q125006> <http://www.wikidata.org/prop/direct/P177> ?x. }",
            "gold_answer": "East River (Q212862)",
            "answer": "East River (Q212862)"
        },
        {
            "question": "how many countries are there in europe ?",
            "paraphrase": "how many countries are there in europe ?",
            "gold": "count ( @wd . country ( ) filter contains ( continent , \" Q46 \" ^^wd:entity ) ) ;",
            "thingtalk": "count ( @wd . country ( ) ) ;",
            "sparql": "SELECT (COUNT(DISTINCT ?x) as ?count) WHERE { ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q6256>. }",
            "gold_answer": "",
            "answer": ""
        },
        {
            "question": "in which city did john f . kennedy die ?",
            "paraphrase": "in which city did john f . kennedy die ?",
            "gold": "[ < place_of_death / located_in_the_administrative_territorial_entity > : Entity ( wd:city ) ] of @wd . entity ( ) filter id == \" Q9696 \" ^^wd:entity ;",
            "thingtalk": "[ place_of_death ] of @wd . entity ( ) filter id == \" Q9696 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q9696> <http://www.wikidata.org/prop/direct/P20> ?x. }",
            "gold_answer": "Dallas (Q16557)",
            "answer": "Parkland Memorial Hospital (Q3896131)"
        },
        {
            "question": "does the isar flow into a lake ?",
            "paraphrase": "does the isar flow into a lake ?",
            "gold": "[ contains ( mouth_of_the_watercourse , any ( [ id ] of @wd . lake ( ) ) ) ] of @wd . entity ( ) filter id == \" Q106588 \" ^^wd:entity ;",
            "thingtalk": "[ contains ( tributary , \" Q106588 \" ^^wd:entity ) ] of @wd . entity ( ) filter id == \" Q106588 \" ^^wd:entity ;",
            "sparql": "ASK WHERE { <http://www.wikidata.org/entity/Q106588> <http://www.wikidata.org/prop/direct/P974> <http://www.wikidata.org/entity/Q106588>. }",
            "gold_answer": "",
            "answer": ""
        },
        {
            "question": "which countries have more than ten caves ?",
            "paraphrase": "which countries have more than ten caves ?",
            "gold": "[ country ] of count ( @wd . landform ( ) filter instance_of == \" Q6256 \" ^^wd:domain ) by country filter count >= 10 ;",
            "thingtalk": "Failed to parse the question.",
            "sparql": null,
            "gold_answer": "",
            "answer": ""
        },
        {
            "question": "are tree frogs a type of amphibian ?",
            "paraphrase": "are tree frogs a type of amphibian ?",
            "gold": "[ contains ( < parent_taxon * > , \" Q10908 \" ^^wd:entity ) ] of @wd . entity ( ) filter id == \" Q53696 \" ^^wd:entity ;",
            "thingtalk": "[ contains ( subclass_of , \" Q10908 \" ^^wd:entity ) ] of @wd . entity ( ) filter id == \" Q1144302 \" ^^wd:entity ;",
            "sparql": "ASK WHERE { <http://www.wikidata.org/entity/Q1144302> <http://www.wikidata.org/prop/direct/P279> <http://www.wikidata.org/entity/Q10908>. }",
            "gold_answer": "",
            "answer": ""
        },
        {
            "question": "who created goofy ?",
            "paraphrase": "who created goofy ?",
            "gold": "[ creator ] of @wd . entity ( ) filter id == \" Q111135 \" ^^wd:entity ;",
            "thingtalk": "[ creator ] of @wd . entity ( ) filter id == \" Q111135 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q111135> <http://www.wikidata.org/prop/direct/P170> ?x. }",
            "gold_answer": "Art Babbitt (Q2420722)",
            "answer": "Art Babbitt (Q2420722)"
        },
        {
            "question": "give me the capitals of all countries in africa .",
            "paraphrase": "give me the capitals of all countries in africa .",
            "gold": "[ capital ] of @wd . country ( ) filter contains ( continent , \" Q15 \" ^^wd:entity ) ;",
            "thingtalk": "[ capital ] of @wd . entity ( ) filter id == \" Q228201 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q228201> <http://www.wikidata.org/prop/direct/P36> ?x. }",
            "gold_answer": "Algiers (Q3561)\nAddis Ababa (Q3624)\nN'Djamena (Q3659)\nAccra (Q3761)\nNairobi (Q3870)\nand 76 more ...",
            "answer": "None"
        },
        {
            "question": "give me all cities in new jersey with more than 100000 inhabitants .",
            "paraphrase": "give me all cities in new jersey with more than 100000 inhabitants .",
            "gold": "@wd . city ( ) filter contains ( located_in_the_administrative_territorial_entity , \" Q1408 \" ^^wd:entity ) && population >= 100000 ;",
            "thingtalk": "@wd . city ( ) filter contains ( located_in_the_administrative_territorial_entity , \" Q1408 \" ^^wd:entity ) && population >= 100000 ;",
            "sparql": "SELECT DISTINCT ?x WHERE { ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q515>. ?x <http://www.wikidata.org/prop/direct/P131>+ <http://www.wikidata.org/entity/Q1408>. ?x <http://www.wikidata.org/prop/direct/P1082> ?y. FILTER(?y > 100000). }",
            "gold_answer": "Elizabeth (Q138311)\nPaterson (Q138391)\nNewark (Q25395)\nJersey City (Q26339)\n",
            "answer": "Elizabeth (Q138311)\nPaterson (Q138391)\nNewark (Q25395)\nJersey City (Q26339)\n"
        },
        {
            "question": "which museum exhibits the scream by munch ?",
            "paraphrase": "which museum exhibits the scream by munch ?",
            "gold": "[ < has_parts / location > : Entity ( wd:art_museum ) ] of @wd . entity ( ) filter id == \" Q471379 \" ^^wd:entity ;",
            "thingtalk": "@wd . entity ( ) filter id == \" Q41406 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT null WHERE {  }",
            "gold_answer": "Munch Museum (Q844926)\nNational Museum of Art, Architecture and Design (Q1132918)\nNational Gallery of Norway (Q3330707)\n",
            "answer": "None"
        },
        {
            "question": "is egypts largest city also its capital ?",
            "paraphrase": "is egypts largest city also its capital ?",
            "gold": "[ contains ( capital_of , \" Q79 \" ^^wd:entity ) ] of sort ( population desc of @wd . city ( ) filter contains ( country , \" Q79 \" ^^wd:entity ) ) ;",
            "thingtalk": "[ contains ( capital , \" Q1110560 \" ^^wd:entity ) ] of @wd . entity ( ) filter id == \" Q25339785 \" ^^wd:entity ;",
            "sparql": "ASK WHERE { <http://www.wikidata.org/entity/Q25339785> <http://www.wikidata.org/prop/direct/P36> <http://www.wikidata.org/entity/Q1110560>. }",
            "gold_answer": "None",
            "answer": ""
        },
        {
            "question": "how many people live in the capital of australia ?",
            "paraphrase": "how many people live in the capital of australia ?",
            "gold": "[ population ] of @wd . entity ( ) filter in_array ( id , any ( [ capital ] of @wd . entity ( ) filter id == \" Q408 \" ^^wd:entity ) ) ;",
            "thingtalk": "[ population ] of @wd . entity ( ) filter id == \" Q3114 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q3114> <http://www.wikidata.org/prop/direct/P1082> ?x. }",
            "gold_answer": "",
            "answer": ""
        },
        {
            "question": "in which country is the limerick lake ?",
            "paraphrase": "in which country is the limerick lake ?",
            "gold": "[ country ] of @wd . entity ( ) filter id == \" Q6386177 \" ^^wd:entity ;",
            "thingtalk": "[ country ] of @wd . entity ( ) filter id == \" Q6386177 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q6386177> <http://www.wikidata.org/prop/direct/P17> ?x. }",
            "gold_answer": "Canada (Q16)",
            "answer": "Canada (Q16)"
        },
        {
            "question": "which television shows were created by john cleese ?",
            "paraphrase": "which television shows were created by john cleese ?",
            "gold": "@wd . television_series ( ) filter contains ( < creator / has_parts > , \" Q25014 \" ^^wd:entity ) || contains ( creator , \" Q25014 \" ^^wd:entity ) ;",
            "thingtalk": "@wd . television_series ( ) filter contains ( creator , \" Q25014 \" ^^wd:entity ) ;",
            "sparql": "SELECT DISTINCT ?x WHERE { ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q5398426>. ?x <http://www.wikidata.org/prop/direct/P170> <http://www.wikidata.org/entity/Q25014>. }",
            "gold_answer": "Fawlty Towers (Q212731)\nAt Last the 1948 Show (Q752945)\nMonty Python's Personal Best (Q1748355)\nPython Night – 30 Years of Monty Python (Q3926086)\nMonty Python's Flying Circus (Q16401)\n",
            "answer": "Fawlty Towers (Q212731)\nAt Last the 1948 Show (Q752945)\nMonty Python's Personal Best (Q1748355)\nPython Night – 30 Years of Monty Python (Q3926086)\n"
        },
        {
            "question": "which mountain is the highest after the annapurna ?",
            "paraphrase": "which mountain is the highest after the annapurna ?",
            "gold": "sort ( elevation_above_sea_level desc of @wd . mountain ( ) filter elevation_above_sea_level <= any ( [ elevation_above_sea_level ] of @wd . entity ( ) filter id == \" Q16466024 \" ^^wd:entity ) ) [ 1 ] ;",
            "thingtalk": "sort ( elevation_above_sea_level desc of @wd . mountain ( ) filter contains ( named_after , \" Q159621 \" ^^wd:entity ) ) [ 1 ] ;",
            "sparql": "SELECT DISTINCT ?x WHERE { ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q8502>. ?x <http://www.wikidata.org/prop/direct/P2044> ?y. ?x <http://www.wikidata.org/prop/direct/P138> <http://www.wikidata.org/entity/Q159621>. } ORDER BY DESC(?y) LIMIT 1",
            "gold_answer": "Vinegar Hill (Q39074795)",
            "answer": "None"
        },
        {
            "question": "in which films directed by garry marshall was julia roberts starring ?",
            "paraphrase": "in which films directed by garry marshall was julia roberts starring ?",
            "gold": "@wd . film ( ) filter contains ( cast_member , \" Q40523 \" ^^wd:entity ) && contains ( director , \" Q315087 \" ^^wd:entity ) ;",
            "thingtalk": "[ cast_member ] of @wd . film ( ) filter contains ( director , \" Q315087 \" ^^wd:entity ) ;",
            "sparql": "SELECT DISTINCT ?y WHERE { ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q11424>. ?x <http://www.wikidata.org/prop/direct/P161> ?y. ?x <http://www.wikidata.org/prop/direct/P57> <http://www.wikidata.org/entity/Q315087>. }",
            "gold_answer": "Pretty Woman (Q207954)\nValentine's Day (Q244975)\nRunaway Bride (Q1160813)\nMother's Day (Q20899741)\n",
            "answer": "Kurt Russell (Q103157)\nKate Hudson (Q169946)\nJennifer Garner (Q172044)\nKatherine Helmond (Q179269)\nJohn Kapelos (Q182931)\nand 317 more ..."
        },
        {
            "question": "was united states president jackson involved in a war ?",
            "paraphrase": "was united states president jackson involved in a war ?",
            "gold": "[ count ( conflict ) >= 1 ] of @wd . entity ( ) filter id == \" Q11817 \" ^^wd:entity ;",
            "thingtalk": "[ count ( conflict ) >= 1 ] of @wd . entity ( ) filter id == \" Q11696 \" ^^wd:entity ;",
            "sparql": "ASK WHERE { <http://www.wikidata.org/entity/Q11696> <http://www.wikidata.org/prop/direct/P607> ?x. }",
            "gold_answer": "",
            "answer": ""
        },
        {
            "question": "give me all communist countries .",
            "paraphrase": "give me all communist countries .",
            "gold": "@wd . administrative_territorial_entity ( ) filter instance_of == \" Q849866 \" ^^wd:domain ;",
            "thingtalk": "@wd . country ( ) ;",
            "sparql": "SELECT DISTINCT ?x WHERE { ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q6256>. }",
            "gold_answer": "Laos (Q819)\nVietnam (Q881)\nPeople's Republic of China (Q148)\n",
            "answer": "South Africa (Q258)\nAlgeria (Q262)\nUzbekistan (Q265)\nChile (Q298)\nSingapore (Q334)\nand 639 more ..."
        },
        {
            "question": "which awards did douglas hofstadter win ?",
            "paraphrase": "which awards did douglas hofstadter win ?",
            "gold": "[ award_received ] of @wd . entity ( ) filter id == \" Q319308 \" ^^wd:entity ;",
            "thingtalk": "[ award_received ] of @wd . entity ( ) filter id == \" Q319308 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q319308> <http://www.wikidata.org/prop/direct/P166> ?x. }",
            "gold_answer": "National Book Award (Q572316)\nPulitzer Prize for General Non-Fiction (Q784589)\nGuggenheim Fellowship (Q1316544)\nAlbertus-Magnus professorate (Q2639529)\nBarwise Prize (Q4865981)\nand 3 more ...",
            "answer": "National Book Award (Q572316)\nPulitzer Prize for General Non-Fiction (Q784589)\nGuggenheim Fellowship (Q1316544)\nAlbertus-Magnus professorate (Q2639529)\nBarwise Prize (Q4865981)\nand 3 more ..."
        },
        {
            "question": "what is the currency of the czech republic ?",
            "paraphrase": "what is the currency of the czech republic ?",
            "gold": "[ currency ] of @wd . entity ( ) filter id == \" Q213 \" ^^wd:entity ;",
            "thingtalk": "[ currency ] of @wd . entity ( ) filter id == \" Q213 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q213> <http://www.wikidata.org/prop/direct/P38> ?x. }",
            "gold_answer": "Czech koruna (Q131016)",
            "answer": "Czech koruna (Q131016)"
        },
        {
            "question": "which countries adopted the euro ?",
            "paraphrase": "which countries adopted the euro ?",
            "gold": "@wd . country ( ) filter contains ( currency , \" Q4916 \" ^^wd:entity ) ;",
            "thingtalk": "Failed to parse the question.",
            "sparql": null,
            "gold_answer": "Republic of Ireland (Q27)\nFinland (Q33)\nItaly (Q38)\nLithuania (Q37)\nAustria (Q40)\nand 22 more ...",
            "answer": ""
        },
        {
            "question": "what is the area code of berlin ?",
            "paraphrase": "what is the area code of berlin ?",
            "gold": "[ local_dialing_code ] of @wd . entity ( ) filter id == \" Q64 \" ^^wd:entity ;",
            "thingtalk": "[ local_dialing_code ] of @wd . entity ( ) filter id == \" Q64 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q64> <http://www.wikidata.org/prop/direct/P473> ?x. }",
            "gold_answer": "",
            "answer": ""
        },
        {
            "question": "which countries have more than two official languages ?",
            "paraphrase": "which countries have more than two official languages ?",
            "gold": "@wd . country ( ) filter count ( official_language ) >= 2 ;",
            "thingtalk": "@wd . country ( ) filter count ( official_language ) >= 2 ;",
            "sparql": "SELECT DISTINCT ?x WHERE { ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q6256>. ?x <http://www.wikidata.org/prop/direct/P37> ?y. } GROUP BY ?x HAVING(COUNT(?y) > 2)",
            "gold_answer": "First Bulgarian Empire (Q203817)\nRepublic of Formosa (Q319881)\nOrganization of Turkic States (Q596850)\nKingdom of Denmark (Q756617)\nTransnistria (Q907112)\nand 150 more ...",
            "answer": "First Bulgarian Empire (Q203817)\nRepublic of Formosa (Q319881)\nOrganization of Turkic States (Q596850)\nKingdom of Denmark (Q756617)\nTransnistria (Q907112)\nand 150 more ..."
        },
        {
            "question": "who is the owner of rolls-royce ?",
            "paraphrase": "who is the owner of rolls-royce ?",
            "gold": "[ owned_by ] of @wd . entity ( ) filter id == \" Q243278 \" ^^wd:entity ;",
            "thingtalk": "[ owned_by ] of @wd . entity ( ) filter id == \" Q243278 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q243278> <http://www.wikidata.org/prop/direct/P127> ?x. }",
            "gold_answer": "Credit Suisse (Q372657)\nCapital Group Companies (Q505275)\nValueAct Capital (Q22032185)\n",
            "answer": "Credit Suisse (Q372657)\nCapital Group Companies (Q505275)\nValueAct Capital (Q22032185)\n"
        },
        {
            "question": "through which countries does the yenisei river flow ?",
            "paraphrase": "through which countries does the yenisei river flow ?",
            "gold": "[ country ] of @wd . entity ( ) filter id == \" Q78707 \" ^^wd:entity ;",
            "thingtalk": "[ country ] of @wd . entity ( ) filter id == \" Q78707 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q78707> <http://www.wikidata.org/prop/direct/P17> ?x. }",
            "gold_answer": "Russia (Q159)",
            "answer": "Russia (Q159)"
        },
        {
            "question": "when did latvia join the eu ?",
            "paraphrase": "when did latvia join the eu ?",
            "gold": "[ start_time of ( member_of filter value == \" Q458 \" ^^wd:entity ) ] of @wd . entity ( ) filter id == \" Q211 \" ^^wd:entity ;",
            "thingtalk": "[ replaces ] of @wd . entity ( ) filter id == \" Q104810552 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q104810552> <http://www.wikidata.org/prop/direct/P1365> ?x. }",
            "gold_answer": "",
            "answer": "None"
        },
        {
            "question": "which politicians were married to a german ?",
            "paraphrase": "which politicians were married to a german ?",
            "gold": "@wd . entity ( ) filter contains ( occupation , \" Q82955 \" ^^wd:entity ) && contains ( spouse , any ( [ id ] of @wd . entity ( ) filter contains ( < place_of_birth / country > , \" Q183 \" ^^wd:entity ) || contains ( country_of_citizenship , \" Q183 \" ^^wd:entity ) ) ) ;",
            "thingtalk": "Failed to parse the question.",
            "sparql": null,
            "gold_answer": "Empress Hermine of Germany (Q61448)\nEva Köhler (Q69129)\nDoris Schröder-Köpf (Q72617)\nMargot Honecker (Q76893)\nElly Heuss-Knapp (Q78010)\nand 964 more ...",
            "answer": ""
        },
        {
            "question": "when was the battle of gettysburg ?",
            "paraphrase": "when was the battle of gettysburg ?",
            "gold": "[ start_time ] of @wd . entity ( ) filter id == \" Q33132 \" ^^wd:entity ;",
            "thingtalk": "[ point_in_time ] of @wd . entity ( ) filter id == \" Q33132 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q33132> <http://www.wikidata.org/prop/direct/P585> ?x. }",
            "gold_answer": "",
            "answer": "None"
        },
        {
            "question": "what is the highest mountain in australia ?",
            "paraphrase": "what is the highest mountain in australia ?",
            "gold": "sort ( elevation_above_sea_level desc of @wd . mountain ( ) filter contains ( continent , \" Q3960 \" ^^wd:entity ) ) [ 1 ] ;",
            "thingtalk": "sort ( elevation_above_sea_level desc of @wd . mountain ( ) ) [ 1 ] ;",
            "sparql": "SELECT DISTINCT ?x WHERE { ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q8502>. ?x <http://www.wikidata.org/prop/direct/P2044> ?y. } ORDER BY DESC(?y) LIMIT 1",
            "gold_answer": "Mount Kosciuszko (Q178167)",
            "answer": "Olympus Mons (Q520)"
        },
        {
            "question": "give me all soccer clubs in spain .",
            "paraphrase": "give me all soccer clubs in spain .",
            "gold": "@wd . sports_organization ( ) filter contains ( country , \" Q29 \" ^^wd:entity ) && instance_of == \" Q476028 \" ^^wd:domain ;",
            "thingtalk": "Failed to parse the question.",
            "sparql": null,
            "gold_answer": "FC Barcelona (Q7156)\nReal Madrid CF (Q8682)\nAthletic Club (Q8687)\nAtlético Madrid (Q8701)\nReal Betis Balompié (Q8723)\nand 1417 more ...",
            "answer": ""
        },
        {
            "question": "what is the official language of suriname ?",
            "paraphrase": "what is the official language of suriname ?",
            "gold": "[ official_language ] of @wd . entity ( ) filter id == \" Q730 \" ^^wd:entity ;",
            "thingtalk": "[ official_language ] of @wd . entity ( ) filter id == \" Q730 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q730> <http://www.wikidata.org/prop/direct/P37> ?x. }",
            "gold_answer": "Dutch (Q7411)",
            "answer": "Dutch (Q7411)"
        },
        {
            "question": "who is the mayor of tel aviv ?",
            "paraphrase": "who is the mayor of tel aviv ?",
            "gold": "[ head_of_government ] of @wd . entity ( ) filter id == \" Q33935 \" ^^wd:entity ;",
            "thingtalk": "[ head_of_government ] of @wd . entity ( ) filter id == \" Q33935 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q33935> <http://www.wikidata.org/prop/direct/P6> ?x. }",
            "gold_answer": "Ron Huldai (Q114760)",
            "answer": "Ron Huldai (Q114760)"
        },
        {
            "question": "which telecommunications organizations are located in belgium ?",
            "paraphrase": "which telecommunications organizations are located in belgium ?",
            "gold": "@wd . organization ( ) filter contains ( country , \" Q31 \" ^^wd:entity ) && contains ( industry , \" Q418 \" ^^wd:entity ) ;",
            "thingtalk": "Failed to parse the question.",
            "sparql": null,
            "gold_answer": "EDPnet (Q4611579)\nCrescent (Belgian company) (Q1949398)\nMobile Vikings (Q2206993)\nBelgacom International Carrier Services (Q15872980)\nnull (Q104500840)\nand 2 more ...",
            "answer": ""
        },
        {
            "question": "is frank herbert still alive ?",
            "paraphrase": "is frank herbert still alive ?",
            "gold": "[ ! ( date_of_death == null ) && ! ( date_of_death == null ) ] of @wd . entity ( ) filter id == \" Q7934 \" ^^wd:entity ;",
            "thingtalk": "[ count >= 1 ] of count ( @wd . entity ( ) filter id == \" Q7934 \" ^^wd:entity ) ;",
            "sparql": "ASK WHERE {  }",
            "gold_answer": "",
            "answer": ""
        },
        {
            "question": "what is the highest place of the urals ?",
            "paraphrase": "what is the highest place of the urals ?",
            "gold": "[ highest_point ] of @wd . entity ( ) filter id == \" Q35600 \" ^^wd:entity ;",
            "thingtalk": "Failed to parse the question.",
            "sparql": null,
            "gold_answer": "Mount Narodnaya (Q1142817)",
            "answer": ""
        },
        {
            "question": "who wrote the lyrics for the polish national anthem ?",
            "paraphrase": "who wrote the lyrics for the polish national anthem ?",
            "gold": "[ < anthem / lyrics_by > ] of @wd . entity ( ) filter id == \" Q36 \" ^^wd:entity ;",
            "thingtalk": "[ lyrics_by ] of @wd . entity ( ) filter id == \" Q482988 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q482988> <http://www.wikidata.org/prop/direct/P676> ?x. }",
            "gold_answer": "Józef Wybicki (Q370069)",
            "answer": "Józef Wybicki (Q370069)"
        },
        {
            "question": "give me all federal chancellors of germany .",
            "paraphrase": "give me all federal chancellors of germany .",
            "gold": "@wd . entity ( ) filter contains ( position_held , \" Q4970706 \" ^^wd:entity ) ;",
            "thingtalk": "[ head_of_government ] of @wd . entity ( ) filter id == \" Q56022 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q56022> <http://www.wikidata.org/prop/direct/P6> ?x. }",
            "gold_answer": "Angela Merkel (Q567)\nKonrad Adenauer (Q2492)\nLudwig Erhard (Q2496)\nWilly Brandt (Q2514)\nKurt Georg Kiesinger (Q2512)\nand 5 more ...",
            "answer": "None"
        },
        {
            "question": "what is the official website of tom cruise ?",
            "paraphrase": "what is the official website of tom cruise ?",
            "gold": "[ official_website ] of @wd . entity ( ) filter id == \" Q37079 \" ^^wd:entity ;",
            "thingtalk": "[ official_website ] of @wd . entity ( ) filter id == \" Q37079 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q37079> <http://www.wikidata.org/prop/direct/P856> ?x. }",
            "gold_answer": "",
            "answer": ""
        },
        {
            "question": "list all episodes of the first season of the hbo television series the sopranos .",
            "paraphrase": "list all episodes of the first season of the hbo television series the sopranos .",
            "gold": "@wd . television_series_episode ( ) filter contains ( season , \" Q5274359 \" ^^wd:entity ) ;",
            "thingtalk": "@wd . entity ( ) filter id == \" Q104810552 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT null WHERE {  }",
            "gold_answer": "The Sopranos (Q1434187)\nMeadowlands (Q1750968)\nCollege (Q2422019)\nI Dream of Jeannie Cusamano (Q3435590)\nBoca (Q3435595)\nand 8 more ...",
            "answer": "None"
        },
        {
            "question": "is there a video game called battle chess ?",
            "paraphrase": "is there a video game called battle chess ?",
            "gold": "[ count >= 1 ] of count ( @wd . video_game ( ) filter id =~ \" battle chess \" ) ;",
            "thingtalk": "[ count >= 1 ] of count ( @wd . video_game ( ) filter id =~ \" battle chess \" ) ;",
            "sparql": "ASK WHERE { ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q7889>. ?x <http://www.w3.org/2000/01/rdf-schema#label> ?y. FILTER(LCASE(STR(?y)) = \"battle chess\"). }",
            "gold_answer": "",
            "answer": ""
        },
        {
            "question": "give me the websites of companies with more than 500000 employees .",
            "paraphrase": "give me the websites of companies with more than 500000 employees .",
            "gold": "[ official_website ] of @wd . organization ( ) filter employees >= 500000 && instance_of == \" Q4830453 \" ^^wd:domain ;",
            "thingtalk": "[ official_website ] of @wd . corporation ( ) filter employees >= 500000 ;",
            "sparql": "SELECT DISTINCT ?y WHERE { ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q167037>. ?x <http://www.wikidata.org/prop/direct/P856> ?y. ?x <http://www.wikidata.org/prop/direct/P1128> ?z. FILTER(?z > 500000). }",
            "gold_answer": "http://www.petrochina.com.cn/ptr/and 19 more ...",
            "answer": "None"
        },
        {
            "question": "which actors were born in germany ?",
            "paraphrase": "which actors were born in germany ?",
            "gold": "@wd . entity ( ) filter contains ( occupation , \" Q10800557 \" ^^wd:entity ) && contains ( place_of_birth , \" Q183 \" ^^wd:entity ) ;",
            "thingtalk": "Failed to parse the question.",
            "sparql": null,
            "gold_answer": "Kostas Sommer (Q85191)\nHorst Baron (Q88789)\nRobert Scholz (Q96795)\nWolfgang Schenck (Q97578)\nBetty Astor (Q102635)\nand 67 more ...",
            "answer": ""
        },
        {
            "question": "which instruments does cat stevens play ?",
            "paraphrase": "which instruments does cat stevens play ?",
            "gold": "[ instrument ] of @wd . entity ( ) filter id == \" Q154216 \" ^^wd:entity ;",
            "thingtalk": "[ instrument ] of @wd . entity ( ) filter id == \" Q154216 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q154216> <http://www.wikidata.org/prop/direct/P1303> ?x. }",
            "gold_answer": "voice (Q17172850)\npiano (Q5994)\nguitar (Q6607)\nbass guitar (Q46185)\n",
            "answer": "voice (Q17172850)\npiano (Q5994)\nguitar (Q6607)\nbass guitar (Q46185)\n"
        },
        {
            "question": "give me all books written by danielle steel .",
            "paraphrase": "give me all books written by danielle steel .",
            "gold": "@wd . book ( ) filter contains ( author , \" Q72653 \" ^^wd:entity ) ;",
            "thingtalk": "@wd . book ( ) filter contains ( author , \" Q72653 \" ^^wd:entity ) ;",
            "sparql": "SELECT DISTINCT ?x WHERE { ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q7725634>. ?x <http://www.wikidata.org/prop/direct/P50> <http://www.wikidata.org/entity/Q72653>. }",
            "gold_answer": "Now and Forever (Q615651)\nSunset in St. Tropez (Q951140)\nSummer's End (Q2416374)\nHeartbeat (Q3000879)\nVanished (Q3030529)\nand 127 more ...",
            "answer": "Now and Forever (Q615651)\nSunset in St. Tropez (Q951140)\nSummer's End (Q2416374)\nHeartbeat (Q3000879)\nVanished (Q3030529)\nand 127 more ..."
        },
        {
            "question": "when did the ming dynasty dissolve ?",
            "paraphrase": "when did the ming dynasty dissolve ?",
            "gold": "[ dissolved_abolished_or_demolished_date ] of @wd . entity ( ) filter id == \" Q9903 \" ^^wd:entity ;",
            "thingtalk": "[ dissolved_abolished_or_demolished_date ] of @wd . entity ( ) filter id == \" Q9903 \" ^^wd:entity ;",
            "sparql": "SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q9903> <http://www.wikidata.org/prop/direct/P576> ?x. }",
            "gold_answer": "",
            "answer": ""
        },
        {
            "question": "is lake baikal bigger than the great bear lake ?",
            "paraphrase": "is lake baikal bigger than the great bear lake ?",
            "gold": "[ area >= any ( [ area ] of @wd . entity ( ) filter id == \" Q5525 \" ^^wd:entity ) ] of @wd . entity ( ) filter id == \" Q5513 \" ^^wd:entity ;",
            "thingtalk": "[ area >= 1 km2 ] of @wd . entity ( ) filter id == \" Q5513 \" ^^wd:entity ;",
            "sparql": "Failed to convert thingtalk into SPARQL",
            "gold_answer": "",
            "answer": ""
        },
        {
            "question": "was the cuban missile crisis earlier than the bay of pigs invasion ?",
            "paraphrase": "was the cuban missile crisis earlier than the bay of pigs invasion ?",
            "gold": "[ end_time <= any ( [ start_time ] of @wd . entity ( ) filter id == \" Q191721 \" ^^wd:entity ) ] of @wd . entity ( ) filter id == \" Q128160 \" ^^wd:entity ;",
            "thingtalk": "[ contains ( followed_by , \" Q191721 \" ^^wd:entity ) ] of @wd . entity ( ) filter id == \" Q128160 \" ^^wd:entity ;",
            "sparql": "ASK WHERE { <http://www.wikidata.org/entity/Q128160> <http://www.wikidata.org/prop/direct/P156> <http://www.wikidata.org/entity/Q191721>. }",
            "gold_answer": "",
            "answer": ""
        }
    ]
}